{"version":3,"sources":["webpack:///./src/pages/dev/typescript-vfs.tsx","webpack:///./src/components/dev-nav.tsx"],"names":["Index","props","title","description","lang","allSitePage","data","id","active","className","style","marginTop","to","href","borderLeft","padding","query","DevNav","isActive","str","toLowerCase","display","withPrefix"],"mappings":"6FAAA,kIAaMA,EAAyB,SAACC,GAC9B,OACE,oCACE,kBAAC,IAAD,CAAQC,MAAM,8BAA8BC,YAAY,2EAA2EC,KAAK,KAAKC,YAAaJ,EAAMK,KAAKD,aACnK,yBAAKE,GAAG,OACN,kBAAC,IAAD,CAAQC,OAAO,mBACf,yBAAKC,UAAU,qCACb,yBAAKA,UAAU,oBACb,wBAAIC,MAAO,CAAEC,UAAW,SAAxB,mCACA,wNAA6L,kBAAC,OAAD,CAAMC,GAAG,iBAAT,YAA7L,kBACA,wEACA,4BACE,mGACA,qEAA0C,sCAA1C,KAA6D,wCAA7D,OAAoF,wCACpF,gHAEF,wDAA6B,uBAAGC,KAAK,oFAAR,2BAG/B,yBAAKJ,UAAU,aAAaC,MAAO,CAAEI,WAAY,iBAAkBC,QAAS,SAC1E,uEACA,6BAAK,0BAAMN,UAAU,aAAhB,iPASL,iFACA,6BAAK,0BAAMA,UAAU,aAAhB,8qBA8BJ,mBAACR,GAAD,OAAkB,kBAAC,IAAD,KAAM,kBAACD,EAAUC,KAG3C,IAAMe,EAAQ,c,kCC7ErB,uEAOaC,EAAS,SAAChB,GACrB,IAAMiB,EAAW,SAACC,GAAD,OACflB,EAAMO,QAAUP,EAAMO,OAAOY,gBAAkBD,EAAM,SAAW,IAElE,OAAO,yBAAKV,UAAU,cACpB,wBAAIA,UAAU,OACZ,wBAAIA,UAAU,QAAO,kDACrB,wBAAIC,MAAO,CAAEW,QAAS,SACpB,uBAAGZ,UAAWS,EAAS,gBAAiBL,KAAMS,qBAAW,kBAAzD,iBAEF,4BACE,uBAAGb,UAAWS,EAAS,WAAYL,KAAMS,qBAAW,iBAApD,YAEF,4BACE,uBAAGb,UAAWS,EAAS,YAAaL,KAAMS,qBAAW,kBAArD,aAEF,4BACE,uBAAGb,UAAWS,EAAS,kBAAmBL,KAAMS,qBAAW,wBAA3D,mBAEF,4BACE,uBAAGb,UAAWS,EAAS,sBAAuBL,KAAMS,qBAAW,4BAA/D","file":"component---src-pages-dev-typescript-vfs-tsx-9f7796b6e19daf22c2be.js","sourcesContent":["import React from \"react\"\nimport { Layout } from \"../../components/layout\"\nimport { withPrefix, graphql, Link } from \"gatsby\"\n\nimport \"./dev.scss\"\nimport { Intl } from \"../../components/Intl\"\nimport { DevNav } from \"../../components/dev-nav\"\nimport { PlaygroundPluginQuery } from \"../../__generated__/gatsby-types\"\n\ntype Props = {\n  data: PlaygroundPluginQuery\n}\n\nconst Index: React.FC<Props> = (props) => {\n  return (\n    <>\n      <Layout title=\"Developers - TypeScript VFS\" description=\"Run TypeScript in the browser, or anywhere - using a virtual file-system\" lang=\"en\" allSitePage={props.data.allSitePage}>\n        <div id=\"dev\">\n          <DevNav active=\"typescript vfs\" />\n          <div className=\"raised content main-content-block\">\n            <div className=\"split-sixhundred\">\n              <h1 style={{ marginTop: \"20px\" }}>Easy access to the compiler API</h1>\n              <p>TypeScript VFS lets you create a self-contained TypeScript environment entirely under your control. This library is used to power the Playground, and provides the underlying tooling for <Link to=\"/dev/twoslash\">twoslash</Link> code samples.</p>\n              <p>There are 3 main uses for TypeScript VFS:</p>\n              <ul>\n                <li>Creating a TypeScript Program as an entry-point to the compiler API</li>\n                <li>Running TypeScript to emit files like <code>*.js</code>, <code>*.d.ts</code> or <code>*.map</code></li>\n                <li>Using TypeScript's language service to make the same calls an editor would make</li>\n              </ul>\n              <p>You can learn more in the <a href=\"https://github.com/microsoft/TypeScript-Website/blob/v2/packages/typescript-vfs/\">TypeScript VFS README</a></p>\n            </div>\n\n            <div className=\"sixhundred\" style={{ borderLeft: \"1px solid gray\", padding: \"20px\" }}>\n              <h3>Setup with TypeScript from node_modules</h3>\n              <pre><code className=\"html-code\">{`import ts from 'typescript'\nimport tsvfs from 'typescript-vfs'\n\nconst fsMap = tsvfs.createDefaultMapFromNodeModules({ target: ts.ScriptTarget.ES2015 })\nfsMap.set('index.ts', 'console.log(\"Hello World\")')\n\n// ....\n              `}</code></pre>\n\n              <h3>Use the TypeScript CDN to get your lib.d.ts files</h3>\n              <pre><code className=\"html-code\">{`import ts from 'typescript'\nimport tsvfs from 'typescript-vfs'\n\nconst fsMap = await tsvfs.createDefaultMapFromCDN(compilerOptions, ts.version, true, ts)\nfsMap.set('index.ts', 'console.log(\"Hello World\")')\n\nconst system = tsvfs.createSystem(fsMap)\nconst host = tsvfs.createVirtualCompilerHost(system, compilerOptions, ts)\n\nconst program = ts.createProgram({\n  rootNames: [...fsMap.keys()],\n  options: compilerOptions,\n  host: host.compilerHost,\n})\n\n// This will update the fsMap with new files\n// for the .d.ts and .js files\nprogram.emit()\n\n// Now I can look at the AST for the .ts file too\nconst index = program.getSourceFile('index.ts')\n              `}</code></pre>\n            </div>\n          </div>\n        </div>\n      </Layout >\n    </>\n  )\n}\n\nexport default (props: Props) => <Intl><Index {...props} /></Intl>\n\n\nexport const query = graphql`\n  query TypeScriptVFS {\n    ...AllSitePage\n  }\n`\n","import React from \"react\"\nimport { withPrefix } from \"gatsby\"\n\ninterface DevNavProps {\n  active?: string\n}\n\nexport const DevNav = (props: DevNavProps) => {\n  const isActive = (str) =>\n    props.active && props.active.toLowerCase() === str ? \"active\" : \"\"\n\n  return <nav className=\"navbar-sub\">\n    <ul className=\"nav\">\n      <li className=\"name\"><span>Developer Tools</span></li>\n      <li style={{ display: \"none\" }}>\n        <a className={isActive(\"compiler api\")} href={withPrefix(\"/dev/compiler\")}>Compiler API</a>\n      </li>\n      <li>\n        <a className={isActive(\"sandbox\")} href={withPrefix(\"/dev/sandbox\")}>Sandbox</a>\n      </li>\n      <li>\n        <a className={isActive(\"twoslash\")} href={withPrefix(\"/dev/twoslash\")}>Twoslash</a>\n      </li>\n      <li>\n        <a className={isActive(\"typescript vfs\")} href={withPrefix(\"/dev/typescript-vfs\")}>TypeScript VFS</a>\n      </li>\n      <li>\n        <a className={isActive(\"playground plugins\")} href={withPrefix(\"/dev/playground-plugins\")}>Playground Plugins</a>\n      </li>\n    </ul>\n  </nav >\n}\n"],"sourceRoot":""}